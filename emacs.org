#+TITLE: Emacs Config
#+DESCRIPTION: An org file containing my Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el

* Introduction
This is a literate config of my emacs configuration, to install this simply run ~M-x org-babel-tangle-file~ or ~C-c C-v f~. This config assumes your emacs config folder is =~/.config/emacs=. This emacs config also comes with a daemon script that I have made, and I find it to be better than the ~emacs --daemon~ comand for a variety of reasons that I won't list here

* Daemon Script

#+begin_src shell :tangle ~/.local/bin/btremacsd :shebang "#!/bin/bash"
  # Note: btremacsd = Better Emacs Daemon

  start_daemon() {
    Xvfb :99 -screen 0 1920x1080x24 & DISPLAY=:99 EMACS_START_SERVER=t emacs &
  }

  kill_daemon() {
    killall Xvfb
    kill $(xdotool getwindowpid $(xdotool search --name "emacsserver"))
  }

  restart_daemon() {
    kill_daemon
    start_daemon
  }

  case $1 in
    -s)
      start_daemon
      ;;
    -k)
      kill_daemon
      ;;
    -r)
      restart_daemon
      ;;
    ,*)
      echo "Invalid command-line argument: $1"
      echo "Usage: betteremacsdaemon -s | -k | -r"
      exit 1
      ;;
  esac
#+end_src

* Performance

#+begin_src emacs-lisp
  ;; This config was generated by org-babel-tangle-file

  ;; Startup performance
  (setq gc-cons-threshold (* 100 1024 1024))

  (defmacro whenserver (&rest body)
    "If EMACS_START_SERVER environment variable is set to \"t\"
  do BODY, else return nil"
    `(when (string= "t" (getenv "EMACS_START_SERVER"))
       ,@body))

  ;; Faster runtime performance when using my own custom daemon script
  (whenserver
   (setq use-package-always-demand t))

#+end_src

* Custom Variables
** Org Agenda Files

#+begin_src emacs-lisp :tangle ~/.config/emacs/custom.el

    (setq org-directory "~/Documents/org")

    (setq org-agenda-files
          '(
            "~/Documents/org/planning/daily.org"
            "~/Documents/org/planning/university.org"
            ))

#+end_src

** Load Custom Variables

#+begin_src emacs-lisp
  (when (file-exists-p "~/.config/emacs/custom.el")
    (load "~/.config/emacs/custom.el"))
#+end_src

* Meta
** Auto Tangle

#+begin_src emacs-lisp 
    ;; Automatically tangle our Emacs.org config file when we save it
    (defun s/org-babel-tangle-config ()
      "If in emacs.org configuration file, run `org-babel-tangle' on it"
      (when (or (string-equal (buffer-file-name)
                          (expand-file-name "~/.config/emacs.org"))
                (string-equal (buffer-file-name)
                              (expand-file-name "~/.config/dotfiles/emacs.org")))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))


    (add-hook 'org-mode-hook
              (lambda () (add-hook 'after-save-hook #'s/org-babel-tangle-config)))

#+end_src

* Initialization
** Initialize Package Sources

#+begin_src emacs-lisp 

        ;; Initialize package sources
        (require 'package)

        (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                                 ("org" . "https://orgmode.org/elpa/")
                                 ("elpa" . "https://elpa.gnu.org/packages/")))

        (package-initialize)
        (unless package-archive-contents
         (package-refresh-contents))

        ;; Initialize use-package on non-Linux platforms
        (unless (package-installed-p 'use-package)
           (package-install 'use-package))

        (require 'use-package)
        (setq use-package-always-ensure t)
        ;(customize-set-variable 'use-package-always-defer t)
        ;(customize-set-variable 'use-package-verbose t)

    (use-package el-get)
    (add-to-list 'el-get-recipe-path "~/.config/emacs/el-get-user/recipes")

  (unless (package-installed-p 'vc-use-package)
    (package-vc-install "https://github.com/slotThe/vc-use-package"))

#+end_src

** Initialize Keybinding Systems
*** Initialize General

#+begin_src emacs-lisp 

  (use-package general
    :config
    (general-create-definer s/leader-keys
      :keymaps 'override
      :states '(normal motion)
      :prefix "C-SPC"
      :global-prefix "SPC"
      :prefix-map 'leader-map)
    (general-create-definer s/elisp-keys
      :keymaps '(normal)
      :prefix "C-l"
      :global-prefix "C-l")
      )

#+end_src

*** Initialize Evil

#+begin_src emacs-lisp

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll nil)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    :config
    (evil-mode 1)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    :custom
    (evil-undo-system 'undo-redo)
    (evil-shift-width standard-indent)
    )
  
#+end_src

* General Settings

#+begin_src emacs-lisp 

  ;;Font settings
  (set-face-attribute 'default nil :font "JetBrains Mono" :height 100)

  (setq
   ;; Fix Window Manager weird gap issue, due to bad size hints
   frame-resize-pixelwise t
   make-backup-files nil
   display-line-numbers-type 'visual
   create-lockfiles nil
   history-length 1000
   auto-save-default nil
   xref-search-program 'ripgrep
   vc-follow-symlinks nil
   )
  ;; (options not properly set with setq)
  ;; Tab width on screen
  (customize-set-variable 'tab-width 2)

  ;; Breathing room
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  ;; Save History
  (savehist-mode 1)
  ;; Disable auto save
  (auto-save-mode -1)
  (auto-save-visited-mode -1)

  ;; Recentf
  (recentf-mode 1)

  (add-hook 'prog-mode-hook
            #'(lambda ()
              (display-line-numbers-mode 1)
              (toggle-truncate-lines 1)
              (electric-pair-mode 1)))


  ;; More natural vim-like scrolling
  (setq scroll-step            1
        scroll-conservatively  10000
        scroll-margin          5)

  ;; Make ESC quit prompts
  (global-set-key (kbd "S-<escape>") 'keyboard-quit)
  (global-set-key (kbd "M-S-<escape>") 'keyboard-escape-quit)

  (setq-default indent-tabs-mode nil)

  ;; enable narrowing
  (put 'narrow-to-region 'disabled nil)

  ;; Auto revert delay time set by variable auto-revert-interval
  (global-auto-revert-mode 1)

  ;; Indent
  (setq standard-indent 2)

  ;; C source code
  (setq find-function-C-source-directory "~/.local/share/emacs-source-code/emacs-29.1/src")

#+end_src

* Packages
** Aesthetics Stuff
*** Doom stuff

#+begin_src emacs-lisp 

  ;; Doom Themes
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universaly disabled
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;;(load-theme 'doom-opera-light t)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-atom")
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    )

  (use-package all-the-icons
    :if (display-graphic-p)
    :commands
    (all-the-icons-insert)
    )

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 28)
    :config
    (set-face-attribute 'doom-modeline nil
                        :family "Lexend Deca")
    )

  (el-get-bundle Souheab/emacs-snippets)

#+end_src

*** Theme

#+begin_src emacs-lisp
  ;; Set externally as a symlink to ezily switch system wide theme with shell script
   ;; (setq theme-file "~/.config/emacs/theme.el")
   ;; (when (file-exists-p theme-file)
   ;;   (load theme-file))

  (load-theme 'doom-tokyo-night t) 


  #+end_src

*** Dashboard

#+begin_src emacs-lisp

  ;; Just change this to add new links to the dashboard menu
  (defcustom dashboard-link-widgets-definition-list
    '(
      ("recentf"
       "file-text"
       "Recently opened files"
       consult-recent-file)

      ("project"
       "briefcase"
       "Open project"
       projectile-switch-project)

      ("org-agenda"
       "calendar"
       "Open org agenda"
       org-agenda)

      ("config"
       "tools"
       "Open config"
       s/goto/literate-config)
      )
    "A list which defines the dashboard link widgets, with format
  '( (NAME ICON LABEL ACTION) (NAME ICON LABEL ACTION) ... )"
    :type 'list
    )



  (defun s/get-keybind (fun)
    (let ((keybind
           (where-is-internal fun (list general-override-mode-map) t)))
      (if keybind
          (replace-regexp-in-string "^<[^>]+>" "" (key-description keybind))
        nil)
      )
    )

  (s/get-keybind #'projectile-switch-project)


  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (general-unbind 'normal dashboard-mode-map "q")

    (defface dashboard-link-face
      '((t (
            :inherit font-lock-keyword-face
            :weight bold
            :height 1.0
            :family "JetBrains Mono"
            )))
      "Face for dashboard links."
      :group 'dashboard)

    (defface dashboard-all-the-icons-face
      '((t (
            :inherit font-lock-keyword-face
            :height 1.3
            )))
      "Face for dashboard links."
      :group 'dashboard)

    (defface dashboard-keybind-face
      '((t (
            :inherit font-lock-constant-face
            )))
      "Face for dashboard keybinds."
      :group 'dashboard)



    (defun dashboard-define-link-widget (name icon text action)
      "Define a link widget with NAME, ICON, TEXT and callback function ACTION"
      (add-to-list 'dashboard-item-generators
                   `(,(intern name) .
                     (lambda (list-size)
                       (let ((icon-string (all-the-icons-octicon ,icon
                                                                 :face 'dashboard-all-the-icons-face
                                                                 :v-adjust -0.07
                                                                 ))
                             (link-button (with-temp-buffer
                                            (insert-text-button
                                             ,text
                                             'action (lambda (_) (call-interactively #',action))
                                             'face 'dashboard-link-face
                                             'follow-link t
                                             'help-echo (format "%s (%s)"
                                                                ,text
                                                                (propertize
                                                                 (symbol-name #',action)
                                                                 'face 'dashboard-keybind-face))

                                             )(format "%-27s" (buffer-string))))
                             (keybind-string (propertize
                                              (s/get-keybind #',action)
                                              'face 'dashboard-keybind-face
                                              ))
                             )
                         (insert (format "%3s\t%s%-10s"
                                         icon-string
                                         link-button
                                         keybind-string)))))))

    (defun dashboard-define-link-widget-list (widget-definitions-list)
      (setq dashboard-items nil)
      (dolist (widget-definition (reverse widget-definitions-list))
        (apply #'dashboard-define-link-widget widget-definition)
        (push `(,(intern (nth 0 widget-definition)) . nil) dashboard-items)
        ))

    (dashboard-define-link-widget-list dashboard-link-widgets-definition-list)


    ;; Gives these keybindings higher presedence then evil
    (general-emacs-define-key dashboard-mode-map
      [remap evil-next-line] #'forward-button
      [remap evil-previous-line] #'backward-button
      [remap dashboard-next-line] #'forward-button
      [remap dashboard-previous-line] #'backward-button
      "C-n" #'next-line
      "C-p" #'previous-line
      )

    :custom
    (dashboard-center-content 
     t)
    (dashboard-banner-logo-title "Emacs my beloved")
    (dashboard-startup-banner "~/.config/emacs/assets/emacs.png")
    (dashboard-projects-backend 'project-el)
    (initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    (dashboard-set-init-info t)
    :hook (dashboard-mode . (lambda ()
                              (solaire-mode -1)
                              (setq-local tab-width 2)
                              ))
    )


#+end_src

*** Other

#+begin_src emacs-lisp 

   (use-package rainbow-delimiters
     :hook (emacs-lisp-mode . rainbow-delimiters-mode))


   (use-package hl-todo
    :config
    (global-hl-todo-mode 1)
    :custom
    (hl-todo-keyword-faces
     '(("TODO" . "#73daca")
       ("HACK" . "#FFdaca")
       ("INFO" . "#00FFFF")
       ("ISSUE" . "#AA9999")
       )
    ))

  (use-package highlight-indent-guides
    :custom
    (highlight-indent-guides-method 'character)
    (highlight-indent-guides-responsive nil)
    :config
    (add-hook 'highlight-indent-guides-mode-hook #'(lambda ()
                                                     (set-face-attribute 'highlight-indent-guides-character-face nil
                                                                         :foreground "#2e3044")))
    :commands
    (highlight-indent-guides-mode)
    )




  ;(load "~/Documents/programming/projects/elisp/my-packages/hli-blanklines.el")
  ;; INFO which is run first prog-mode-hook or the specific lang-hook ?
  ;(add-hook 'c-mode-hook (lambda () (highlight-indent-guides-blank-lines-mode 1)))

#+end_src

** Packages with minimal/no config

#+begin_src emacs-lisp 

  (use-package neotree
    :commands (neotree-toggle))

  (use-package command-log-mode
    :commands (command-log-mode
               clm/open-command-log-buffer
               clm/toggle-command-log-buffer))

  (use-package vterm
    :commands (vterm)
    )

  (use-package undohist
    :config
    (undohist-initialize))

  (use-package helpful
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key)
    )

  (use-package elisp-demos
    :config
    (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update))

  (use-package solaire-mode
    :config
    (solaire-global-mode 1))


  (use-package git-gutter
    :config
    (global-git-gutter-mode 1))

  (use-package eros
    :config
    (eros-mode 1))

  (use-package projectile
    :config
    (whenserver
     (projectile-mode)) ;; running this SLOWs down emacs startup that's why
    )           ;; wrapped around (when)

  (use-package projectile-ripgrep
    :after projectile)


  (use-package ace-window
    :custom
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    :commands (ace-window))

  (el-get-bundle zerolfx/copilot.el)
  (general-define-key
   :keymaps 'copilot-mode-map
   :states '(insert normal)
   "C-l" 'copilot-accept-completion
   )
  (use-package editorconfig)

                                          ;    (use-package copilot
                                          ;      :general
                                          ;      (:keymaps 'copilot-completion-map
                                          ;                )

  (use-package kbd-mode
  :vc (:fetcher github :repo kmonad/kbd-mode))

#+end_src

** Popups
*** Shackle

#+begin_src emacs-lisp 
  (use-package shackle
    :defer t)
#+end_src

*** Popper

#+begin_src emacs-lisp 
  (use-package popper
  :custom
  (popper-mode-line nil)
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          help-mode
          helpful-mode
          compilation-mode
          vterm-mode
          ))
  (popper-mode +1)
  (popper-echo-mode +1))                ; For echo area hints
#+end_src

** Vertico
*** Vertico

#+begin_src emacs-lisp 

        (use-package vertico
          :general
          (:keymaps 'vertico-map
           "C-j" #'vertico-next
           "C-k" #'vertico-previous)
          :init
          (vertico-mode)
          )

        (use-package consult
          :after vertico
          :commands
          (consult-line consult--multi consult-recent-file)
          )

      ;; Make minibuffer input completions work
      ;; Use `consult-completion-in-region' if Vertico is enabled.
      ;; Otherwise use the default `completion--in-region' function.
      (setq completion-in-region-function
            (lambda (&rest args)
              (apply (if vertico-mode
                         #'consult-completion-in-region
                       #'completion--in-region)
                     args)))

#+end_src

*** Orderless

#+begin_src emacs-lisp 
    (use-package orderless
      :after vertico
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion))))
      )
#+end_src

*** Marginalla

#+begin_src emacs-lisp 
    ;; Enable rich annotations using the Marginalia package
  (use-package marginalia
    ;; Bind `marginalia-cycle' locally in the minibuffer.  To make the binding
    ;; available in the *Completions* buffer, add it to the
    ;; `completion-list-mode-map'.
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))

    ;; The :init section is always executed.
    :init

    ;; Marginalia must be actived in the :init section of use-package such that
    ;; the mode gets enabled right away. Note that this forces loading the
    ;; package.
    (marginalia-mode))
#+end_src

** Dired

#+begin_src emacs-lisp 
  (setq dired-omit-files "^\\...+$")


  (use-package all-the-icons-dired
    :after (dired)
    :hook (dired-mode . all-the-icons-dired-mode)
    :commands (dired)
    )
#+end_src

* Ligatures

#+begin_src emacs-lisp
  (setq prettify-symbols-alist '(("lambda" . ?λ )))
  (global-prettify-symbols-mode 1)

  (use-package ligature
    :config
    ;; Enable the "www" ligature in every possible major mode
    (ligature-set-ligatures 't '("www"))
    ;; Enable traditional ligature support in eww-mode, if the
    ;; `variable-pitch' face supports it
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    ;; Enable all Cascadia Code ligatures in programming modes
    (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                         ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                         "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                         "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                         "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                         "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                         "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                         "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                         ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                         "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                         "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                         "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                         "\\\\" "://"))
    ;; Enables ligature checks globally in all buffers. You can also do it
    ;; per mode with `ligature-mode'.
    (global-ligature-mode t))
#+end_src

* Org
** Basic Initialization

#+begin_src emacs-lisp 

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil
                      :font "JetBrains Mono"
                      :height 110
                      :weight 'regular)

  (setq org-imenu-depth 6)

  (use-package valign
    :custom
    (valig-fancy-bar t)
    :after org)


  (defun s/org-mode-setup ()
    (org-indent-mode)
    (s/org-font-setup)
    (visual-line-mode 1)
    (valign-mode 1)
    )

  (defun s/org-font-setup ()


    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 0.95)
                    (org-level-6 . 0.9)
                    (org-level-7 . 0.85)
                    (org-level-8 . 1.8)))
      (set-face-attribute (car face) nil
                          :font "Lexend Deca" :weight 'regular :height (cdr face)))

    (set-face-attribute 'org-table nil :font "Lexend Deca")


    )

  (use-package org
    :general
    (:keymaps 'org-mode-map :states 'normal
              "RET" 'org-open-at-point)
    :hook (org-mode . s/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
    :defer t
    )

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●"))
    (org-superstar-leading-bullet "")
    (org-superstar-leading-fallback 32)
    :config
    (set-face-attribute 'org-superstar-header-bullet nil
                        :font "Noto Sans"
                        :height 0.9)
    )


  (defun s/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))


  (use-package visual-fill-column
    :after org
    :hook (org-mode . s/org-mode-visual-fill))

  (use-package mixed-pitch
    :after org
    :hook
    (org-mode . mixed-pitch-mode)
    )




  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))


  ;; Org todo mark keybind
  (general-define-key
   :keymaps 'org-mode-map
   :states '(normal)
   "t" 'org-todo)

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-image-actual-width nil)
  (setq org-startup-with-inline-images t)

  (add-hook 'org-cycle-hook
            (lambda (state)
              (when (eq state 'children)
                (setq org-cycle-subtree-status 'subtree))))

#+end_src

** Org Babel

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages '((python . t)
                               (C . t)
                               (lua . t)
                               )
   )
#+end_src

** Org Roam

#+begin_src emacs-lisp 

  (use-package org-roam
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Documents/org/OrgRoam")
    (org-roam-completion-everywhere t)
    ;; Templates
    (org-roam-capture-templates
     ;; Default template
     '(("d" "default" plain
        "\n* Introduction\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ;; Project Template
       ("p" "project" plain
        "\n* Introduction\n* Expected Final Product\n* Design Strategy
  ,* Link"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ))

    :config
    (org-roam-setup))

  (use-package org-roam-ui
    :after org-roam)

#+end_src

** Evil Org mode

#+begin_src emacs-lisp 

  (use-package evil-org
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))
  
#+end_src

** Spellcheck / Writing stuff

#+begin_src emacs-lisp 
  (setq ispell-program-name "hunspell")

 (setq ispell-hunspell-dict-paths-alist
'(("en_US" "/usr/share/hunspell/en_US.aff"))) 

  (use-package writegood-mode
    :after org
    )

  (use-package langtool
    :after org
    :custom
    (langtool-java-classpath
     "/usr/share/languagetool:/usr/share/java/languagetool/*")
    )

  (define-minor-mode s/org-spellcheck-mode
    "Toggles spellcheck options"
    :lighter "s/org-spellcheck"
    (if s/org-spellcheck-mode
        (progn
          (flyspell-mode 1)
          (writegood-mode 1))
      (flyspell-mode -1)
      (writegood-mode -1)
      )
    )
#+end_src

** Org Packages

#+begin_src emacs-lisp
    (use-package org-fragtog
      :after org
      :config
      (add-hook 'org-mode-hook 'org-fragtog-mode)
      )

    (use-package org-modern
      :after org)
#+end_src

* Markdown

#+begin_src emacs-lisp 
  (set-face-attribute 'variable-pitch nil :font "Lexend Deca" :weight 'regular)

  (use-package markdown-mode
    :defer t
    :mode ("\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown")
    :config
    (set-face-attribute
     'markdown-header-face nil
     :font "Lexend Deca"
     :weight 'regular
     :height 1.2)
    (add-hook 'markdown-mode-hook (lambda () (mixed-pitch-mode t)))
    (add-hook 'markdown-view-mode-hook (lambda () (mixed-pitch-mode t)))
    :commands
    (markdown-mode)
    )
#+end_src

* EAF

#+begin_src emacs-lisp

  (setq use-eaf t)
  (setq eaf-path "~/.config/emacs/site-lisp/emacs-application-framework/")

  (when (and use-eaf (file-directory-p eaf-path))
    (ignore-errors
      (add-to-list 'load-path eaf-path)
      (require 'eaf)
      (require 'eaf-browser)
      (require 'eaf-pdf-viewer)
      (require 'eaf-camera)
      (require 'eaf-music-player)
      (require 'eaf-video-player)

      (define-key eaf-mode-map* (kbd "SPC") nil)
      (eaf-bind-key nil "SPC" eaf-pdf-viewer-keybinding)
      (eaf-bind-key scroll_up_page "K" eaf-pdf-viewer-keybinding)
      (eaf-bind-key scroll_down_page "J" eaf-pdf-viewer-keybinding)
      (eaf-bind-key nil "SPC" eaf-music-player-keybinding)
      (eaf-bind-key js_toggle_play_status "p" eaf-music-player-keybinding)
      ))
#+end_src

* Turning Emacs into an IDE
** Magit

#+begin_src emacs-lisp 
    (use-package magit
      :commands (magit magit-status))
#+end_src

** Initializing LSP

#+begin_src emacs-lisp 

    (defun s/lsp-mode-setup ()
      (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
      (lsp-headerline-breadcrumb-mode)
      )

    (use-package lsp-mode
      :commands (lsp lsp-deferred)
      :init
      (setq lsp-keymap-prefix "C-c C-l")
      :hook ((lsp-mode . s/lsp-mode-setup)
             (lsp-help-mode . s/set-solaire-variable-pitch-font))
      :custom
      (lsp-enable-on-type-formatting nil)
      (lsp-inlay-hint-enable t)
      :config
      (lsp-enable-which-key-integration t)
      (add-to-list 'lsp-language-id-configuration '(js-jsx-mode . "javascriptreact") t)
      )

    (use-package lsp-ui
      :custom
      (lsp-ui-sideline-show-hover nil)
      :hook (lsp-mode . lsp-ui-mode))

    (use-package company
      :after prog-mode
      :hook (prog-mode . company-mode)
      :bind (:map company-active-map
                  ("<tab>" . company-complete-selection))
      (:map prog-mode-map
            ("<tab>" . company-indent-or-complete-common))
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.0)
                                            ; :config
      ;; https://company-mode.github.io/manual/Backends.html
      :config
      (add-hook 'prog-mode-hook
                (lambda ()
                  (setq-local company-backends
                              '((:separate company-capf company-yasnippet)
                                company-yasnippet)
                              )))
      )


      (use-package company-box
        :after company
        :hook (company-mode . company-box-mode)
        )

      (use-package flycheck
        :after lsp-mode)

      (use-package yasnippet
        :bind(
              :map yas-minor-mode-map
              ("M-SPC" . yas-expand)
              ("C-M-SPC" . company-yasnippet))
        :config
        (yas-global-mode)
        )

      (global-company-mode 1)

      ;; Quickrun
      (use-package quickrun
        :commands (quickrun))


#+end_src

** DAP

#+begin_src emacs-lisp
  (use-package dap-mode)
#+end_src

** Treemacs

#+begin_src emacs-lisp

  (use-package treemacs
    :custom
    (treemacs-width 30)
    (treemacs--width-is-locked nil)
    (treemacs-width-is-initially-locked nil)
    :commands
    (treemacs)
    :config
    (treemacs-toggle-fixed-width)
    )

  (use-package treemacs-persp
    :after (treemacs persp-mode)
    :config
    (treemacs-set-scope-type 'Perspectives)
    )

  (use-package treemacs-evil
    :after (treemacs evil)
    )

  (use-package treemacs-all-the-icons
    :after (treemacs all-the-icons)
    :config
    (treemacs-load-theme "all-the-icons"))



  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)
#+end_src

** Treesitter

#+begin_src emacs-lisp 
    (use-package tree-sitter
      :hook (tree-sitter-mode . tree-sitter-hl-mode)
      :commands (tree-sitter-mode))

    (use-package tree-sitter-langs
      :after tree-sitter)

    (setq treesit-font-lock-level 4)

    (setq treesit-language-source-alist
          '((bash "https://github.com/tree-sitter/tree-sitter-bash")
            (cmake "https://github.com/uyha/tree-sitter-cmake")
            (css "https://github.com/tree-sitter/tree-sitter-css")
            (elisp "https://github.com/Wilfred/tree-sitter-elisp")
            (go "https://github.com/tree-sitter/tree-sitter-go")
            (html "https://github.com/tree-sitter/tree-sitter-html")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (json "https://github.com/tree-sitter/tree-sitter-json")
            (make "https://github.com/alemuller/tree-sitter-make")
            (markdown "https://github.com/ikatyang/tree-sitter-markdown")
            (python "https://github.com/tree-sitter/tree-sitter-python")
            (toml "https://github.com/tree-sitter/tree-sitter-toml")
            (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
            (yaml "https://github.com/ikatyang/tree-sitter-yaml")
            (c "https://github.com/tree-sitter/tree-sitter-c")
            (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
            ))


  (custom-set-faces
     '(font-lock-constant-face
     ((t (:weight bold
          ))))
     '(tree-sitter-hl-face:type
     ((t (:weight semi-bold
          :inherit font-lock-builtin-face
          ))))
     '(tree-sitter-hl-face:function.call
     ((t (:inherit font-lock-function-name-face
          :slant italic
          ))))
     '(tree-sitter-hl-face:function
     ((t (:inherit font-lock-function-name-face
          :weight bold
          ))))
     '(tree-sitter-hl-face:variable.parameter
     ((t (:inherit tree-sitter-hl-face:variable
          :weight normal
          :slant italic
          ))))
     '(tree-sitter-hl-face:keyword
     ((t (:inherit font-lock-keyword-face
          :slant italic
          ))))
     '(tree-sitter-hl-face:operator
     ((t (:inherit tree-sitter-hl-face:keyword
          :slant normal
          ))))
     '(tree-sitter-hl-face:constant.builtin
     ((t (:inherit font-lock-constant-face
          ))))
   )

  (require 'treesit)
  ;; Installs language grammars if not present
  (mapc #'(lambda (lang) (when (not (treesit-ready-p lang t)) (treesit-install-language-grammar lang)))
        (mapcar #'car treesit-language-source-alist))

#+end_src

** Autoformatting

#+begin_src emacs-lisp 

  (use-package format-all
    :after lsp-mode)
  
#+end_src

** Language Support
*** Initialization Hooks

#+begin_src emacs-lisp

  (defun s/init-regular-lsp-lang ()
    (lsp-deferred)
    (tree-sitter-mode 1)
    (tree-sitter-hl-mode 1))
  
#+end_src

*** Emacs Lisp

#+begin_src emacs-lisp 
  (use-package highlight-quoted
    :hook (emacs-lisp-mode . highlight-quoted-mode))

  (el-get-bundle hi-var
    :url
    "https://raw.githubusercontent.com/emacsmirror/emacswiki.org/master/hi-var.el"
    )

  (el-get-bundle hl-defined
    :url "https://www.emacswiki.org/emacs/download/hl-defined.el")

  (require 'hl-defined)
  (add-hook 'emacs-lisp-mode-hook #'hdefd-highlight-mode)
  (set-face-attribute 'hdefd-functions nil
                      :foreground (face-foreground
                                   'font-lock-function-name-face))

  (set-face-attribute 'hdefd-variables nil
                      :foreground (face-foreground
                                   'default)
                      :weight 'semi-bold
                      :slant 'italic)

  (use-package macrostep
    :commands (macrostep-mode macrostep-expand)
    )


#+end_src

*** Python

#+begin_src emacs-lisp 

  (use-package python
    :mode ("\\.py\\'" . python-ts-mode)
    :custom
    (python-indent-offset 2)
    :hook (python-ts-mode . lsp-deferred)
    :config
    )

#+end_src

*** Rust

#+begin_src emacs-lisp 

  (use-package rustic
    :mode ("\\.rs\\'" . rustic-mode)
    :hook
    (rustic-mode . (lambda ()
                     (s/init-regular-lsp-lang)
                     (setq-local indent-bars-spacing 4)))
    :custom
    (rustic-indent-offset 4)
    (rust-prettify-symbols-alist (("INFINITY" . 8734)))
    (lsp-rust-analyzer-binding-mode-hints t)
    (lsp-rust-analyzer-closing-brace-hints t)
    (lsp-rust-analyzer-display-chaining-hints t)
    (lsp-rust-analyzer-closing-brace-hints-min-lines 1)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "never")
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
    (lsp-rust-analyzer-display-parameter-hints t)
    (lsp-rust-analyzer-display-reborrow-hints nil)
    :config
    )

#+end_src

*** C

#+begin_src emacs-lisp 
  (use-package cc-mode
    :mode (("\\.c\\'" . c-mode)
           ("\\.h\\'" . c-or-c++-mode)
           ("\\.cpp\\'" . c++-mode)
           )
    :hook (((c-ts-mode c++-ts-mode) . lsp-deferred)
           ((c-mode c++-mode) . s/init-regular-lsp-lang)))

#+end_src

*** Lua

#+begin_src emacs-lisp 

  (use-package lua-mode
    :mode "\\.lua\\'"
    :custom
    (lua-indent-level standard-indent)
    :hook
    (lua-mode . (lambda () (lsp-deferred) (tree-sitter-mode))))

#+end_src

*** Web dev

**** HTML

#+begin_src emacs-lisp

  (use-package web-mode
    :hook (web-mode . (lambda() (emmet-mode 1) (lsp-mode 1)))
    :defer t
    )

  (use-package emmet-mode
    :commands (emmet-mode))

#+end_src

**** CSS

#+begin_src emacs-lisp
  
  (customize-set-variable 'css-indent-offset standard-indent)

  (use-package css-mode
    :mode "\\.css\\'")



  (add-hook 'html-mode-hook #'(lambda () (emmet-mode 1) (lsp-mode 1)))


#+end_src

**** JS/JSX/TS/TSX

#+begin_src emacs-lisp
    (customize-set-variable 'js-indent-level standard-indent)


    (use-package npm-mode
      :commands (npm-mode))


    (use-package prettier-js
      :commands (prettier-js-mode))


    (use-package js2-mode
      :mode "\\.js\\'"
      :custom
      (js2-strict-missing-semi-warning nil))

    (use-package rjsx-mode
      :after (js2-mode)
      :mode "\\.jsx\\'")

    ;; typescript stuff
    (use-package typescript-ts-mode
      :mode (("\\.ts\\'" . typescript-ts-mode) ("\\.tsx\\'" . tsx-ts-mode))
      :hook
      ((typescript-ts-mode tsx-ts-mode) .
       (lambda () (lsp-deferred) (prettier-js-mode)))
      )

    #+end_src

*** Java

#+begin_src emacs-lisp
  (use-package lsp-java
    :after java-mode
    )
#+end_src

*** Common Lisp

#+begin_src emacs-lisp
  (use-package sly
    :custom
    (inferior-lisp-program "sbcl")
    )
#+end_src

*** Latex
#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :hook (tex-mode . lsp-deferred)
    )

  (use-package latex-preview-pane)
#+end_src

** Workspaces
*** Initialize Workspaces

#+begin_src emacs-lisp

  (use-package persp-mode
    :commands (persp-switch-to-buffer)
    :custom
    (persp-autokill-buffer-on-remove 'kill-weak)
    (persp-reset-windows-on-nil-window-conf nil)
    (persp-nil-hidden t)
    (persp-save-dir "~/.config/emacs/workspaces/")
    (persp-set-last-persp-for-new-frames t)
    (persp-kill-foreign-buffer-behaviour nil)
    (persp-remove-buffers-from-nil-persp-behaviour nil)
    (persp-auto-resume-time -1) ; Don't auto-load on startup
    (persp-auto-save-opt 1)
    )


  (el-get-bundle workspaces
    :type git
    :compile nil
    :url "https://gitlab.com/TheSussyBaka69/elisp-packages/workspaces.git")
  (require 'workspaces)
  (setq workspace-fallback-buffer "*dashboard*")
  (persp-mode 1)
#+end_src

*** Workspace: My Interactive Functions

#+begin_src emacs-lisp

  ;; copied from doom kek

  (defun s/vertico--workspace-buffer-state ()
    (let ((preview
           ;; Only preview in current window and other window.
           ;; Preview in frames and tabs is not possible since these don't get cleaned up.
           (if (memq consult--buffer-display
                     '(switch-to-buffer switch-to-buffer-other-window))
               (let ((orig-buf (current-buffer))
                     (other-win nil)
                     (cleanup-buffers nil))
                 `(lambda (action cand)
                    (when (eq action 'preview)
                      (when (and (eq consult--buffer-display #'switch-to-buffer-other-window)
                                 (not ,other-win))
                        (switch-to-buffer-other-window ,orig-buf)
                        (setq ,other-win (selected-window)))
                      (let ((win (or ,other-win (selected-window))))
                        (when (window-live-p win)
                          (with-selected-window win
                            (cond
                             ((and cand (get-buffer cand))
                              (unless (workspace-contains-buffer-p cand)
                                (cl-pushnew cand ,cleanup-buffers))
                              (switch-to-buffer cand 'norecord))
                             ((buffer-live-p ,orig-buf)
                              (switch-to-buffer ,orig-buf 'norecord)
                              (mapc #'persp-remove-buffer ,cleanup-buffers)))))))))
             #'ignore)))
      `(lambda (action cand)
         (funcall ,preview action cand)
         )
      ))

  (defun s/vertico--workspace-generate-sources ()
    "Generate list of consult buffer sources for all workspaces"
    (let* ((active-workspace (workspace-current-name))
           (workspaces (workspace-list-names))
           (key-range (append (cl-loop for i from ?1 to ?9 collect i)
                              (cl-loop for i from ?a to ?z collect i)
                              (cl-loop for i from ?A to ?Z collect i)))
           (last-i (length workspaces))
           (i 0))
      (mapcar (lambda (name)
                (cl-incf i)
                `(:name     ,name
                  :hidden   ,(not (string= active-workspace name))
                  :narrow   ,(nth (1- i) key-range)
                  :category buffer
                  :state    s/vertico--workspace-buffer-state
                  :items    (lambda ()
                            (consult--buffer-query
                                :sort 'visibility
                                :as #'buffer-name
                                :predicate
                                (lambda (buf)
                                (when-let (workspace (workspace-get ,name t))
                                    ;; add this function workspace-contains-buffer-p
                                    (workspace-contains-buffer-p buf workspace)))
                                ))))
              (workspace-list-names))))

  (defun s/vertico/switch-workspace-buffer (&optional force-same-workspace)
    "Switch to another buffer in the same or a specified workspace.

      Type the workspace's number (starting from 1) followed by a space to display its
      buffer list. Selecting a buffer in another workspace will switch to that
      workspace instead. If FORCE-SAME-WORKSPACE (the prefix arg) is non-nil, that
      buffer will be opened in the current workspace instead."
    (interactive "P")
    (when-let (buffer (consult--multi (s/vertico--workspace-generate-sources)
                                      :require-match
                                      (confirm-nonexistent-file-or-buffer)
                                      :prompt (format "Switch to buffer (%s): "
                                                      (workspace-current-name))
                                      :history 'consult--buffer-history
                                      :sort nil))
      (let ((origin-workspace (plist-get (cdr buffer) :name)))
        ;; Switch to the workspace the buffer belongs to, maybe
        (if (or (equal origin-workspace (workspace-current-name))
                force-same-workspace)
            (funcall consult--buffer-display (car buffer))
          (workspace-switch origin-workspace)
          (message "Switched to %S workspace" origin-workspace)
          (if-let (window (get-buffer-window (car buffer)))
              (select-window window)
            (funcall consult--buffer-display (car buffer)))))))



#+end_src

*** Workspace and Project.el/Projectile Integration

#+begin_src emacs-lisp
  (defun workspaces-switch-to-project-h ()
    "Hook to run after project-switch-project, to start a new workspace
          for each project."
    (let* ((project-name
            (file-name-nondirectory
             (directory-file-name
              (project-root
               (project-current)))))
           (switch-buffer (current-buffer))
           (new-persp (ignore-errors (workspace-new project-name)))
           (old-persp (get-current-persp))
           (old-persp-name (persp-name old-persp))
           )
      ;; If new-persp nil
      (when (not new-persp)
        (setq new-persp (workspace-get project-name)))
      (when (not (string= project-name old-persp-name))
        (persp-add-buffer switch-buffer new-persp)
        (persp-remove-buffer switch-buffer old-persp)
        (workspace-switch project-name)
        (switch-to-buffer switch-buffer)
        )
      )
    (run-with-timer 0.3 0 #'workspace/display)
    )

  (add-hook 'project-switch-project-hook #'workspaces-switch-to-project-h)
  (advice-add 'project-switch-project :after
              #'(lambda (&rest _args)
                  (run-hooks 'project-switch-project-hook)))

  (add-hook 'projectile-after-switch-project-hook #'workspaces-switch-to-project-h)

#+end_src

** Code Folding

#+begin_src emacs-lisp
  (use-package yafolding
    :hook (prog-mode . yafolding-mode))

  (el-get-bundle emacs-tree-sitter/ts-fold)
  (el-get-bundle nschum/fringe-helper.el)
  (use-package ts-fold
    :ensure nil
    :commands (ts-fold-mode)
    )
  (use-package fringe-helper
    :ensure nil
    :after ts-fold)
#+end_src

** Indent Guides

#+begin_src emacs-lisp
  (el-get-bundle jdtsmith/indent-bars)
  (setq
    indent-bars-color '("#FFFFFF" :face-bg t :blend 0.2)
    indent-bars-pattern "."
    indent-bars-width-frac 0.1
    indent-bars-pad-frac 0.1
    indent-bars-zigzag nil
    indent-bars-color-by-depth nil
    indent-bars-highlight-current-depth nil
    indent-bars-display-on-blank-lines t)
  (add-hook 'prog-mode-hook #'(lambda () (indent-bars-mode 1)))
  (add-hook 'emacs-lisp-mode-hook #'(lambda () (indent-bars-mode -1)))
#+end_src

* My functions
** Buffer Related

#+begin_src emacs-lisp

  (defun list-all-buffers (&optional files-only)
    "Display a list of names of existing buffers.
  The list is displayed in a buffer named `*Buffer List*'.
  Non-null optional arg FILES-ONLY means mention only file buffers.

  For more information, see the function `buffer-menu'."
    (interactive "P")
    (display-buffer (list-buffers-noselect files-only (buffer-list))))


#+end_src

** Launch Terminal in project directory 

#+begin_src emacs-lisp

  (cl-defun open-terminal-in-directory (&optional (dir default-directory))
    (interactive)
    (call-process "wezterm" nil 0 nil "start" "--cwd" dir)
    (message (concat "Opened Wezterm at " dir))
    )

  (cl-defun open-lf-in-terminal (&optional (dir default-directory))
    (interactive)
    (call-process "wezterm" nil 0 nil "start" "lf" dir)
    (message (concat "Opened lf at " dir))
    )

#+end_src

** Disable stuff during org fontification

#+begin_src emacs-lisp
  (cl-defun org-src-fontification-buffer-p (&optional (buf (buffer-name)))
    (string-match "\*org-src-fontification.*\*$" buf)
    )

  (defun org-src-fontification-disable-modes ()
    (when (org-src-fontification-buffer-p)
      (indent-bars-mode -1)
      )
    )

  (add-hook 'prog-mode-hook #'org-src-fontification-disable-modes 100)
#+end_src

** Vertico

#+begin_src emacs-lisp
  (setq s/vertico-consult-fd-args "fd --color=never -i -H -E .git --regex")

  (defun s/call-process (command &rest args)
    "Execute COMMAND with ARGS synchronously.
    Returns (STATUS . OUTPUT) when it is done, where STATUS is the returned error
    code of the process and OUTPUT is its stdout output."
    (with-temp-buffer
      (cons (or (apply #'call-process command nil t nil (remq nil args))
                -1)
            (string-trim (buffer-string)))))

  (defun s/vertico-find-file-in (&optional dir prompt-dir-p initial)
    "Jump to file under DIR (recursive).
  If INITIAL is non-nil, use as initial input."
    (interactive)
    (require 'consult)
    (let* ((default-directory (if prompt-dir-p
                                  (car (find-file-read-args "Find file in: "
                                                            (confirm-nonexistent-file-or-buffer)))
                                (or dir default-directory)
                                )
                              )
           (prompt-dir (consult--directory-prompt "Find" default-directory))
           (cmd (split-string-and-unquote s/vertico-consult-fd-args " ")))
      (find-file
       (consult--read
        (split-string (cdr (apply #'s/call-process cmd)) "\n" t)
        :prompt default-directory
        :sort nil
        :initial (if initial (shell-quote-argument initial))
        :add-history (thing-at-point 'filename)
        :category 'file
        :history '(:input s/vertico-find-file-in--history)
        ))))

  (defun s/vertico-find-file-in-prompt-dir ()
    (interactive)
    (s/vertico-find-file-in nil t)
    )

#+end_src

** Org

#+begin_src emacs-lisp
  (defun s/search-notes ()
    (interactive)
    (s/vertico-find-file-in org-directory))

  (cl-defun s/org-latex-previews (&optional (beg (point-min)) (end (point-max)))
    (interactive)
    (save-excursion
      (goto-char beg)
      (while (re-search-forward "\\\[.*\\\]\\|\\$.*\\$" end t)
        (call-interactively #'org-latex-preview)
        )
      )
    )
#+end_src

* Keybindings
** General
*** Regular key definitions

#+begin_src emacs-lisp 

  (general-define-key
       :keymaps 'override
       :states '(normal)
       "C-=" 'text-scale-increase
       "C--" 'text-scale-decrease)

  (general-define-key
       :keymaps 'override
       :states '(normal insert)
       "C-f" 'consult-line)

  (general-define-key
   :keymaps 'override
   :states 'insert
   "C-;" 'evil-force-normal-state)

#+end_src

*** Elisp keys

#+begin_src emacs-lisp 

  (s/elisp-keys
   :keymaps '(global-map emacs-lisp-mode-map)
   :states 'normal

   "e" 'eval-last-sexp
   "r" 'eval-region
   "d" 'eval-defun)

#+end_src

*** Leader Sub-Keymaps

#+begin_src emacs-lisp 
  (general-define-key
   :prefix-map 'file-management-map
   "f" 'find-file
   "r" 'consult-recent-file
   "e" 'neotree-toggle
   "t" 'treemacs
   "v" 's/vertico-find-file-in
   "V" 's/vertico-find-file-in-prompt-dir
   )

  ;; GOTO map interactive functions
  (defun s/goto/literate-config ()
    (interactive)
    (find-file "~/.config/emacs.org"))

  (defun s/goto/elisp-config ()
    (interactive)
    (find-file "~/.config/emacs/init.el"))

  (general-define-key
   :prefix-map 'goto-buffer-map
   "o" #'s/goto/literate-config
   "i" #'s/goto/elisp-config
   "d" #'dashboard-open
   "g" 'magit-status
   )


  (general-define-key
   :prefix-map 'minor-mode-management-map
   "i" 'highlight-indent-guides-mode)

  (general-define-key
   :prefix-map 'help-map
   "F" 'describe-face
   "h" 's/dwim-help-at-point
   "p" 'describe-package
   )

  (general-define-key
   :prefix-map 'buffer-management-map
   "k" 'kill-current-buffer
   "K" 'kill-buffer
   "wk" 'kill-buffer-and-window
   "s" 'hydra-text-scale/body
   "b" 'consult-buffer)

  (general-define-key
   :prefix-map 'evil-window-map
   "d" 'delete-window
   "b" nil
   "bk" 'kill-buffer-and-window
   "a" 'ace-window)

  (general-define-key
   :prefix-map 'org-roam-map
   "f" 'org-roam-node-find
   "i" 'org-roam-node-insert
   "l" 'org-roam-buffer-toggle)

  (general-define-key
   :prefix-map 'org-management-map
   "r" '(:keymap org-roam-map :which-key "org roam")
   "a" 'org-agenda
   "c" 'org-cycle-agenda-files
   "b" '(:keymap org-babel-map :which-key "org babel")
   "f" 's/search-notes
   "l" 'org-latex-preview
   "L" 's/org-latex-previews
   ">" 'org-shiftmetaright
   "<" 'org-shiftmetaleft
   )

  (general-define-key
   :prefix-map 'search-map
   "i" 'consult-imenu
   "s" 'consult-line)

  (general-define-key
   :prefix-map 's/popper-map
   "p" 'popper-toggle-latest
   "C-p" 'popper-toggle-latest
   "t" 'popper-toggle-type
   "c" 'popper-cycle)

  (general-define-key
   :prefix-map 'projectile-management-map
   "p" 'projectile-switch-project) ;; not being used ATM

  (general-define-key
   :prefix-map  'workspace-management-map
   "SPC" 'workspace/display
   "s" 'workspace/switch-to
   "D" 'workspace/delete
   "b" 'workspace/switch-to-buffer
   "n" 'workspace/new)


  (general-define-key
   :prefix-map  'eaf-management-map
   "m" 'eaf-open-music-player
   "b" 'eaf-open-browser
   "c" 'eaf-open-camera
   )

  (general-define-key
   :prefix-map 'terminal-launch-map
   "l" 'open-lf-in-terminal
   "o" 'open-terminal-in-directory
   )

  (general-define-key
       :keymaps 'override
       :states '(normal motion)
       "C-p" '(:keymap s/popper-map :which-key "popper"))

#+end_src

*** Leader keys

#+begin_src emacs-lisp 

  (s/leader-keys
   "." 'find-file
   "<" 'consult-buffer
   "," 's/vertico/switch-workspace-buffer
   "q" 'quickrun-shell
   "h" '(help-command :which-key "help")
   "x" '(execute-extended-command :which-key "M-x")

   "g" '(:keymap goto-buffer-map :which-key "goto buffer")
   "f" '(:keymap file-management-map :which-key "files")
   "b" '(:keymap buffer-management-map :which-key "buffers")
   "w" '(:keymap evil-window-map :which-key "windows")
   "m" '(:keymap minor-mode-management-map :which-key "manage minor modes")
   "o" '(:keymap org-management-map :which-key "org")
   "s" '(:keymap search-map :which-key "search")
   "p" '(:keymap projectile-command-map :which-key "project" :package projectile)
   "P" '(:keymap s/popper-map :which-key "popper")
   "l" '(:keymap lsp-command-map :which-key "lsp" :package lsp-mode)
   "SPC" '(:keymap workspace-management-map :which-key "workspaces")
   "e" '(:keymap eaf-management-map :which-key "EAF")
   "t" '(:keymap terminal-launch-map :which-key "Terminal")
   )

#+end_src

** Evil

#+begin_src emacs-lisp 


  ;; Evil don't exit visual mode when indenting
  (defun s/evil-shift-right ()
    "Shift right but don't leave evil visual state"
    (interactive)
    (evil-shift-right evil-visual-beginning evil-visual-end)
    (evil-normal-state)
    (evil-visual-restore))

  (defun s/evil-shift-left ()
    "Shift left but don't leave evil visual state"
    (interactive)
    (evil-shift-left evil-visual-beginning evil-visual-end)
    (evil-normal-state)
    (evil-visual-restore))

  (general-define-key
   :prefix-map 'evil-normal-state-map
   "gC" 'comment-dwim
   "gc" 'evilnc-comment-or-uncomment-lines
   )


  (evil-define-key 'visual global-map (kbd ">") 's/evil-shift-right)
  (evil-define-key 'visual global-map (kbd "<") 's/evil-shift-left)

  (use-package evil-collection
    :config
    (evil-collection-init)
    :commands
    (evil-collection-init))

  (use-package evil-snipe
    :after evil
    :config
    (evil-snipe-mode +1)
    (evil-snipe-override-mode +1)
    :commands
    (evil-snipe-f)
    )

  (use-package evil-nerd-commenter
    :commands
    (evilnc-comment-or-uncomment-lines))

  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

#+end_src

** Hydra

#+begin_src emacs-lisp 

  (use-package hydra
    :commands
    (hydra-repeat)
    )

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("k" text-scale-increase "in")
    ("j" text-scale-decrease "out")
    ("f" nil "finished" :exit t)
    )


#+end_src

** Which-Key

#+begin_src emacs-lisp 

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

#+end_src

* DWIM
** Buffer Kill

#+begin_src emacs-lisp 
  (defcustom unkillable-modes-list '(dashboard-mode)
    "Modes that are unkillable if using the kill-current-buffer command"
    :type 'list)

  (defun s/dwim-kill-current-buffer (orig-fun &rest args)
     (if (cl-loop for mode in unkillable-modes-list
                  when (eq mode (buffer-local-value 'major-mode (current-buffer)))
                  return t)
         (message "%s is unkillable" (buffer-name))
       (apply orig-fun args)
       )
     )
  
  (advice-add 'kill-current-buffer :around #'s/dwim-kill-current-buffer)

#+end_src

** Help at point

#+begin_src emacs-lisp 
  (defun s/dwim-help-at-point ()
    (interactive)
    (cond ((bound-and-true-p lsp-mode)
           (lsp-describe-thing-at-point)
           (with-current-buffer "*lsp-help*"))
          (t (helpful-at-point))))

  ;; Help font formatting
  (defface solaire-variable-pitch-face
    '((t :inherit solaire-default-face
         :family "Lexend Deca"
         :height 1.0))
    "Face for variable pitch text.")

  (defun s/set-solaire-variable-pitch-font ()
    (solaire-mode -1)
    (mixed-pitch-mode 1)
    (face-remap-add-relative 'default 'solaire-variable-pitch-face)
    )

  ;; write a mode-change-hook that detects if set-solaire-variable-pitch-font needs to be enabled
  (advice-add 'lsp-help-mode :after #'(lambda (&rest _a)
                                        (run-hooks 'lsp-help-mode-hook)
                                        ))

  ;; Needed to work properly in emacsclient. (Yes even my own hacky implemetation)
  (add-hook 'company-box-mode-hook (lambda ()
                                     (with-current-buffer (company-box--get-buffer "doc")
                                       (s/set-solaire-variable-pitch-font)))
            )

  (setq company-box-doc-delay 0.1)
#+end_src

* Emacsclient Fixes

#+begin_src emacs-lisp 

  (setq server-client-instructions nil)
  ;; Fixed Indent guides by manually setting faces (not sure if this is necessary but oh well)


  ;; For my custom daemon script
  (whenserver
   (server-start)
   )

#+end_src
